# docker-compose.yml
version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: blog-postgres
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: blog-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
     context: ./blog-backend
    container_name: blog-backend
    depends_on:
     - postgres
     - redis
    env_file:
     - ./blog-backend/.env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT_BACKEND}   # <- utiliser PORT_BACKEND ici
    ports:
      - "${PORT_BACKEND}:3000"  # <- pareil
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./blog-frontend
      dockerfile: Dockerfile.dev
    container_name: blog-frontend
    ports:
      - "${PORT_FRONTEND}:3000"
    volumes:
      - ./blog-frontend:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./blog-frontend/.env.local
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${PORT_BACKEND}
      NODE_ENV: development
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network


volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
